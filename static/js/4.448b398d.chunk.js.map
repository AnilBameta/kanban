{"version":3,"file":"static/js/4.448b398d.chunk.js","mappings":"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","sources":["services/todoService.js","components/TodoCard.js","components/Lane.js","components/KanbanBoard.js","components/TodoForm.js","App.js"],"sourcesContent":["const API_BASE = \"https://dummyjson.com/todos\";\r\n\r\nexport async function fetchTodos() {\r\n    const res = await fetch(`${API_BASE}?limit=100`);\r\n    const data = await res.json();\r\n    // Add default 'status' if missing, map 'inProgress' flag\r\n    return data.todos.map(todo => ({\r\n      ...todo,\r\n      status: todo.status || (todo.completed ? \"Completed\" : \"Pending\"),\r\n      inProgress: false\r\n    }));\r\n  }\r\n\r\nexport async function createTodo(todoText) {\r\n  const res = await fetch(API_BASE + \"/add\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ todo: todoText, completed: false, userId: 1, status: \"Pending\" })\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function updateTodo(id, updatedFields) {\r\n  const res = await fetch(`${API_BASE}/${id}`, {\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(updatedFields)\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function deleteTodo(id) {\r\n  await fetch(`${API_BASE}/${id}`, { method: \"DELETE\" });\r\n}","import React, { useState } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\n\r\nexport default function TodoCard({ todo, status, onUpdate, onDelete }) {\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: \"TODO\",\r\n    item: { id: todo.id },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  }), [todo.id]);\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedText, setEditedText] = useState(todo.todo);\r\n\r\n  const toggleCompletion = () => {\r\n    const isCompleted = status === \"Completed\";\r\n    onUpdate(todo.id, { completed: !isCompleted, status: isCompleted ? \"Pending\" : \"Completed\" });\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (editedText.trim()) {\r\n      onUpdate(todo.id, { todo: editedText });\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={drag}\r\n      className={`bg-white p-3 rounded shadow flex justify-between items-start transition-transform duration-200 ease-in-out ${isDragging ? \"scale-95 opacity-50\" : \"hover:scale-[1.02]\"}`}\r\n    >\r\n      <div className=\"flex-1\">\r\n        {isEditing ? (\r\n          <input\r\n            type=\"text\"\r\n            value={editedText}\r\n            onChange={(e) => setEditedText(e.target.value)}\r\n            onBlur={handleSave}\r\n            className=\"w-full border px-2 py-1 rounded text-sm text-gray-800\"\r\n            autoFocus\r\n          />\r\n        ) : (\r\n          <p\r\n            className=\"font-medium text-gray-800 cursor-pointer\"\r\n            onClick={handleEdit}\r\n            title=\"Click to edit\"\r\n          >\r\n            {todo.todo}\r\n          </p>\r\n        )}\r\n        <p className=\"text-sm text-gray-400\">Status: {status}</p>\r\n      </div>\r\n      <div className=\"space-x-2 text-sm\">\r\n        <button\r\n          className=\"text-green-600 hover:underline\"\r\n          onClick={toggleCompletion}\r\n        >\r\n          {status === \"Completed\" ? \"Undo\" : \"Done\"}\r\n        </button>\r\n        <button\r\n          className=\"text-red-500 hover:underline\"\r\n          onClick={() => onDelete(todo.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TodoCard from \"./TodoCard\";\r\nimport { useDrop } from \"react-dnd\";\r\n\r\nconst getStatusColor = (title) => {\r\n  return title === \"Completed\" ? \"border-green-500\" : title === \"In Progress\" ? \"border-yellow-400\" : \"border-gray-300\";\r\n};\r\n\r\nexport default function Lane({ title, todos, onUpdate, onDelete }) {\r\n  const [, drop] = useDrop({\r\n    accept: \"TODO\",\r\n    drop: (item) => {\r\n      const isCompleted = title === \"Completed\";\r\n      onUpdate(item.id, { completed: isCompleted, status: title, inProgress: title === \"In Progress\" });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div ref={drop} className={`bg-white border-t-4 ${getStatusColor(title)} p-4 rounded w-full md:w-1/3 min-h-[300px] min-w-[250px] shadow-sm transition-shadow hover:shadow-md`}>\r\n      <h2 className=\"text-lg font-semibold mb-3 text-center\">{title}</h2>\r\n      <div className=\"space-y-3\">\r\n        {todos.map((todo) => (\r\n          <TodoCard\r\n            key={todo.id}\r\n            todo={todo}\r\n            status={title}\r\n            onUpdate={onUpdate}\r\n            onDelete={onDelete}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Lane from \"./Lane\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nconst STATUS = [\"Pending\", \"In Progress\", \"Completed\"];\r\n\r\nfunction mapStatus(todo) {\r\n    if (todo.status) return todo.status;\r\n    return todo.inProgress ? 'In Progress' : todo.completed ? \"Completed\" : \"Pending\";\r\n  }\r\n\r\nexport default function KanbanBoard({ todos, onUpdate, onDelete }) {\r\n  const grouped = STATUS.reduce((acc, status) => {\r\n    acc[status] = todos.filter((todo) => mapStatus(todo) === status);\r\n    return acc;\r\n  }, {});\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <div className=\"flex flex-col md:flex-row gap-4 items-start justify-center\">\r\n        {STATUS.map((status) => (   \r\n          <Lane\r\n            key={status}\r\n            title={status}\r\n            todos={grouped[status] || []}\r\n            onUpdate={onUpdate}\r\n            onDelete={onDelete}\r\n          />\r\n        ))}\r\n      </div>\r\n    </DndProvider>\r\n  );\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TodoForm({ onSubmit }) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!text.trim()) return;\r\n    onSubmit(text);\r\n    setText(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"bg-white border-t-4 border-blue-400 p-4 rounded w-full md:w-1/3 shadow-sm h-fit mb-5\">\r\n      <h2 className=\"font-semibold mb-2 text-center\">Add Todo</h2>\r\n      <input\r\n        type=\"text\"\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        placeholder=\"Enter todo\"\r\n        className=\"w-full border px-3 py-2 rounded mb-3 focus:outline-none focus:ring-2 focus:ring-blue-300\"\r\n      />\r\n      <button type=\"submit\" className=\"w-full bg-blue-500 hover:bg-blue-600 text-white py-2 rounded\">\r\n        Add Task\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { fetchTodos, createTodo, deleteTodo } from \"./services/todoService\";\nimport KanbanBoard from \"./components/KanbanBoard\";\nimport TodoForm from \"./components/TodoForm\";\n\nexport default function App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    fetchTodos().then(setTodos);\n  }, []);\n\n  const handleCreate = async (todoText) => {\n    const newTodo = await createTodo(todoText);\n    setTodos((prev) => [newTodo, ...prev]);\n  };\n\n  const handleUpdate = async (id, updatedFields) => {\n    // const updatedTodo = await updateTodo(id, updatedFields);\n    setTodos((prev) => prev.map(t => t.id === id ? {...t,...updatedFields} : t));\n  };\n\n  const handleDelete = async (id) => {\n    await deleteTodo(id);\n    setTodos((prev) => prev.filter(t => t.id !== id));\n  };\n\n  return (\n    <div className=\"p-4 bg-gradient-to-br from-slate-50 to-slate-200 min-h-screen flex flex-col items-center\">\n      <h1 className=\"text-3xl font-bold mb-6 text-center text-gray-700\">Kanban Todo Board</h1>\n      <TodoForm onSubmit={handleCreate} />\n      <KanbanBoard todos={todos} onUpdate={handleUpdate} onDelete={handleDelete} />\n    </div>\n  );\n}"],"names":["API_BASE","TodoCard","_ref","todo","status","onUpdate","onDelete","isDragging","drag","useDrag","type","item","id","collect","monitor","isEditing","setIsEditing","useState","editedText","setEditedText","_jsxs","ref","className","children","_jsx","value","onChange","e","target","onBlur","handleSave","trim","autoFocus","onClick","handleEdit","title","toggleCompletion","isCompleted","completed","getStatusColor","Lane","todos","drop","useDrop","accept","inProgress","map","STATUS","KanbanBoard","grouped","reduce","acc","filter","mapStatus","DndProvider","backend","HTML5Backend","TodoForm","onSubmit","text","setText","preventDefault","placeholder","App","setTodos","useEffect","async","res","fetch","json","fetchTodos","then","newTodo","todoText","method","headers","body","JSON","stringify","userId","createTodo","prev","updatedFields","t","deleteTodo"],"sourceRoot":""}